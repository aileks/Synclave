import { Button, Dialog, TextField } from '@kobalte/core';
import {
  For,
  Match,
  Show,
  Switch,
  createEffect,
  createSignal,
  onMount,
} from 'solid-js';
import IconPin from '~icons/heroicons/bookmark';
import IconCheckBadge from '~icons/heroicons/check-badge';
import IconChevronDown from '~icons/heroicons/chevron-down';
import IconSettings from '~icons/heroicons/cog-8-tooth';
import IconCommand from '~icons/heroicons/command-line';
import IconMore from '~icons/heroicons/ellipsis-horizontal';
import IconHashtag from '~icons/heroicons/hashtag';
import IconSearch from '~icons/heroicons/magnifying-glass';
import IconSend from '~icons/heroicons/paper-airplane';
import IconAttachment from '~icons/heroicons/paper-clip';
import IconPlus from '~icons/heroicons/plus';
import IconServer from '~icons/heroicons/server-stack';
import IconMembers from '~icons/heroicons/user-group';
import IconClose from '~icons/heroicons/x-mark';

export default function Home() {
  // Mock data - Workspaces
  const workspaces = [
    {
      id: 'designhub',
      name: 'DesignHub',
      domain: 'designhub.community',
      status: 'connected',
      channels: [
        { name: '#general', joined: true, unread: 0 },
        { name: '#product-design', joined: true, unread: 3 },
        { name: '#ux-research', joined: true, unread: 0 },
        { name: '#inspiration', joined: true, unread: 0 },
        { name: '#resources', joined: false, memberCount: 143 },
        { name: '#jobs', joined: false, memberCount: 89 },
      ],
      directMessages: [
        { user: 'taylor', unread: 1 },
        { user: 'aiden', unread: 0 },
      ],
    },
    {
      id: 'figmacraft',
      name: 'FigmaCraft',
      domain: 'figmacraft.org',
      status: 'connected',
      channels: [
        { name: '#plugins', joined: true, unread: 0 },
        { name: '#prototyping', joined: true, unread: 0 },
        { name: '#components', joined: false, memberCount: 78 },
        { name: '#showcase', joined: false, memberCount: 204 },
      ],
      directMessages: [{ user: 'sophie', unread: 0 }],
    },
    {
      id: 'devspace',
      name: 'DevSpace',
      domain: 'devs.network',
      status: 'connected',
      channels: [
        { name: '#frontend', joined: true, unread: 0 },
        { name: '#backend', joined: false, memberCount: 156 },
        { name: '#mobile', joined: false, memberCount: 92 },
      ],
    },
  ];

  // Mock data - Members
  const members = [
    { name: 'olivia', status: 'online', role: 'admin' },
    { name: 'taylor', status: 'online', role: 'moderator' },
    { name: 'aiden', status: 'online', role: 'member' },
    { name: 'emma', status: 'online', role: 'member' },
    { name: 'noah', status: 'online', role: 'member' },
    { name: 'maya', status: 'online', role: 'verified' },
    { name: 'james', status: 'online', role: 'member' },
    { name: 'sophia', status: 'online', role: 'member' },
    { name: 'lucas', status: 'online', role: 'moderator' },
    { name: 'lily', status: 'online', role: 'member' },
    { name: 'ethan', status: 'online', role: 'member' },
    { name: 'ava', status: 'online', role: 'member' },
    { name: 'liam', status: 'offline', role: 'member' },
    { name: 'zoe', status: 'offline', role: 'member' },
    { name: 'william', status: 'offline', role: 'member' },
    { name: 'grace', status: 'offline', role: 'member' },
    { name: 'benjamin', status: 'offline', role: 'member' },
    { name: 'harper', status: 'offline', role: 'member' },
    { name: 'daniel', status: 'offline', role: 'member' },
    { name: 'amelia', status: 'offline', role: 'member' },
  ];

  // Mock data - Messages
  const messages = {
    designhub: {
      '#general': [
        {
          id: '1',
          type: 'message',
          user: { name: 'olivia', role: 'admin' },
          content:
            'Welcome to the DesignHub community! ðŸ‘‹ This is a space for designers to collaborate and share ideas.',
          time: '09:30',
          timestamp: new Date(Date.now() - 1000 * 60 * 150),
        },
        {
          id: '2',
          type: 'system',
          content: 'Taylor joined the channel',
          timestamp: new Date(Date.now() - 1000 * 60 * 120),
        },
        {
          id: '3',
          type: 'message',
          user: { name: 'taylor', role: 'moderator' },
          content: 'Hi everyone! Excited to join this community!',
          time: '10:05',
          timestamp: new Date(Date.now() - 1000 * 60 * 110),
        },
        {
          id: '4',
          type: 'message',
          user: { name: 'maya', role: 'verified' },
          content:
            'Good to see you here Taylor! Looking forward to your contributions.',
          time: '10:08',
          timestamp: new Date(Date.now() - 1000 * 60 * 107),
        },
        {
          id: '5',
          type: 'action',
          user: { name: 'aiden' },
          content: 'waves hello to everyone',
          time: '10:12',
          timestamp: new Date(Date.now() - 1000 * 60 * 103),
        },
      ],
      '#product-design': [
        {
          id: '1',
          type: 'message',
          user: { name: 'maya', role: 'verified' },
          content:
            'Just published a new article on design systems. Check it out and let me know your thoughts!',
          time: '10:30',
          timestamp: new Date(Date.now() - 1000 * 60 * 40),
        },
        {
          id: '2',
          type: 'message',
          user: { name: 'james', role: 'member' },
          content:
            "This is really insightful. I've been working on implementing a design system at my company, and your approach addresses many of the challenges we've faced.",
          time: '10:34',
          timestamp: new Date(Date.now() - 1000 * 60 * 36),
        },
        {
          id: '3',
          type: 'message',
          user: { name: 'emma', role: 'member' },
          content:
            "Has anyone here used Figma's variables feature for creating responsive components?",
          time: '10:42',
          timestamp: new Date(Date.now() - 1000 * 60 * 28),
        },
        {
          id: '4',
          type: 'message',
          user: { name: 'olivia', role: 'admin' },
          content:
            "Yes! We've been using them extensively. They're a game-changer for maintaining consistency across different states and themes.",
          time: '10:48',
          timestamp: new Date(Date.now() - 1000 * 60 * 22),
        },
      ],
      '#ux-research': [
        {
          id: '1',
          type: 'message',
          user: { name: 'noah', role: 'member' },
          content:
            "I'm planning a usability study for our new checkout flow. Anyone have recommendations for remote testing tools?",
          time: '09:15',
          timestamp: new Date(Date.now() - 1000 * 60 * 165),
        },
        {
          id: '2',
          type: 'message',
          user: { name: 'lily', role: 'member' },
          content:
            "We've had great results with UserTesting.com. Their platform makes it easy to set up tests and analyze results.",
          time: '09:20',
          timestamp: new Date(Date.now() - 1000 * 60 * 160),
        },
      ],
      '#inspiration': [],
      taylor: [
        {
          id: '1',
          type: 'message',
          user: { name: 'taylor', role: 'moderator' },
          content: 'Hey! Do you have time to review my latest design?',
          time: '11:02',
          timestamp: new Date(Date.now() - 1000 * 60 * 15),
        },
        {
          id: '2',
          type: 'message',
          user: { name: 'you', role: 'member' },
          content: 'Sure! I can take a look at it this afternoon.',
          time: '11:04',
          timestamp: new Date(Date.now() - 1000 * 60 * 13),
        },
        {
          id: '3',
          type: 'message',
          user: { name: 'taylor', role: 'moderator' },
          content:
            'Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.',
          time: '11:05',
          timestamp: new Date(Date.now() - 1000 * 60 * 12),
        },
        {
          id: '10',
          type: 'message',
          user: { name: 'taylor', role: 'moderator' },
          content:
            'Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit.',
          time: '11:08',
          timestamp: new Date(Date.now() - 1000 * 60 * 9),
        },
      ],
      aiden: [
        {
          id: '1',
          type: 'message',
          user: { name: 'aiden', role: 'member' },
          content:
            'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam vel sapien vel ante cursus venenatis.',
          time: '10:55',
          timestamp: new Date(Date.now() - 1000 * 60 * 22),
        },
        {
          id: '2',
          type: 'message',
          user: { name: 'aiden', role: 'member' },
          content:
            'Maecenas ut felis sit amet eros tincidunt consectetur vel id arcu?',
          time: '10:56',
          timestamp: new Date(Date.now() - 1000 * 60 * 21),
        },
      ],
    },
    figmacraft: {
      '#plugins': [
        {
          id: '1',
          type: 'message',
          user: { name: 'emma', role: 'member' },
          content:
            'Fusce rhoncus dui eget urna pellentesque, vel interdum dui facilisis. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices?',
          time: '09:32',
          timestamp: new Date(Date.now() - 1000 * 60 * 145),
        },
        {
          id: '2',
          type: 'message',
          user: { name: 'lucas', role: 'moderator' },
          content:
            'Mauris bibendum neque id velit porttitor vestibulum. Sed eget mauris sed massa egestas luctus vitae quis tellus. Mauris euismod elit non turpis mattis, et fermentum lorem suscipit.',
          time: '09:35',
          timestamp: new Date(Date.now() - 1000 * 60 * 142),
        },
      ],
      '#prototyping': [
        {
          id: '1',
          type: 'message',
          user: { name: 'olivia', role: 'admin' },
          content:
            'Nulla nec malesuada nunc, id venenatis nisi. Pellentesque tristique tortor a eros eleifend, non molestie felis rutrum. Praesent fermentum eu velit eget maximus.',
          time: '10:15',
          timestamp: new Date(Date.now() - 1000 * 60 * 60),
        },
      ],
    },
    devspace: {
      '#frontend': [
        {
          id: '1',
          type: 'message',
          user: { name: 'liam', role: 'member' },
          content:
            'Integer facilisis magna at porta semper. Nunc vitae leo sit amet neque blandit aliquet. Aenean pharetra purus id lobortis accumsan.',
          time: '11:15',
          timestamp: new Date(Date.now() - 1000 * 60 * 2),
        },
        {
          id: '2',
          type: 'message',
          user: { name: 'maya', role: 'verified' },
          content:
            'Etiam tempor dui sit amet orci facilisis elementum. Nullam tincidunt tellus ac velit iaculis fringilla. Donec aliquam urna nec nibh rhoncus, ut pellentesque arcu tincidunt.',
          time: '11:17',
          timestamp: new Date(Date.now() - 1000 * 60 * 1),
        },
      ],
    },
  };

  // Mock data - Commands
  const commands = [
    {
      name: 'me',
      description: 'Send an action message',
      usage: '/me waves hello',
    },
    {
      name: 'shrug',
      description: 'Append a shrug emoticon',
      usage: '/shrug [message]',
    },
    {
      name: 'nick',
      description: 'Change display name',
      usage: '/nick newname',
    },
    { name: 'mute', description: 'Mute a channel', usage: '/mute [duration]' },
    {
      name: 'status',
      description: 'Set your status',
      usage: '/status [emoji] message',
    },
    {
      name: 'giphy',
      description: 'Search for a GIF',
      usage: '/giphy search term',
    },
    {
      name: 'poll',
      description: 'Create a poll',
      usage: '/poll "Question" "Option 1" "Option 2"',
    },
    {
      name: 'remind',
      description: 'Set a reminder',
      usage: '/remind [time] [message]',
    },
    {
      name: 'help',
      description: 'List available commands',
      usage: '/help [command]',
    },
    {
      name: 'dm',
      description: 'Start a direct message',
      usage: '/dm username',
    },
    {
      name: 'invite',
      description: 'Invite a user to channel',
      usage: '/invite username',
    },
    {
      name: 'kick',
      description: 'Remove a user from channel',
      usage: '/kick username',
    },
  ];

  // Network and channel management
  const [currentWorkspace, setCurrentWorkspace] = createSignal('designhub');
  const [currentChannel, setCurrentChannel] = createSignal('#product-design');
  const [showMemberList, setShowMemberList] = createSignal(false); // Default to hidden on mobile
  const [showWorkspaceList, setShowWorkspaceList] = createSignal(false); // Default to hidden on mobile
  const [inputValue, setInputValue] = createSignal('');
  const [showCommandPalette, setShowCommandPalette] = createSignal(false);
  const [expandedWorkspaces, setExpandedWorkspaces] = createSignal({
    designhub: true,
    figmacraft: true,
    devspace: false,
  });

  // Animation states
  const [workspaceListVisible, setWorkspaceListVisible] = createSignal(false);
  const [memberListVisible, setMemberListVisible] = createSignal(false);

  // New mobile states
  const [isMobileMenuOpen, setIsMobileMenuOpen] = createSignal(false);
  const [isMobile, setIsMobile] = createSignal(
    typeof window !== 'undefined' ? window.innerWidth < 768 : true,
  );

  // Window resize handler
  createEffect(() => {
    if (typeof window === 'undefined') return;

    const handleResize = () => {
      const mobile = window.innerWidth < 768;
      setIsMobile(mobile);

      // Auto-show sidebars on desktop
      if (!mobile) {
        setShowWorkspaceList(true);
        setWorkspaceListVisible(true);
        // Optionally show member list on desktop
        setShowMemberList(true);
        setMemberListVisible(true);
      } else {
        // Hide sidebars on mobile
        setShowWorkspaceList(false);
        setWorkspaceListVisible(false);
        setShowMemberList(false);
        setMemberListVisible(false);
      }
    };

    window.addEventListener('resize', handleResize);
    handleResize(); // Initial check

    return () => window.removeEventListener('resize', handleResize);
  });

  // Use effects to apply animations
  createEffect(() => {
    if (showWorkspaceList()) {
      // Small delay to ensure CSS transitions work properly
      setTimeout(() => setWorkspaceListVisible(true), 10);
    } else {
      setWorkspaceListVisible(false);
    }
  });

  createEffect(() => {
    if (showMemberList()) {
      setTimeout(() => setMemberListVisible(true), 10);
    } else {
      setMemberListVisible(false);
    }
  });

  // Toggle workspace expansion
  const toggleWorkspaceExpanded = id => {
    setExpandedWorkspaces({
      ...expandedWorkspaces(),
      [id]: !expandedWorkspaces()[id],
    });
  };

  // Handle mobile menu toggle
  const toggleMobileMenu = () => {
    setIsMobileMenuOpen(!isMobileMenuOpen());

    // When opening mobile menu, show workspace list
    if (!isMobileMenuOpen()) {
      setShowWorkspaceList(true);
      setShowMemberList(false);
    }
  };

  // Handle mobile channel selection
  const selectChannel = (workspace, channel) => {
    setCurrentWorkspace(workspace);
    setCurrentChannel(channel);

    // Close mobile menu after selection on mobile
    if (isMobile()) {
      setIsMobileMenuOpen(false);
      setShowWorkspaceList(false);
    }
  };

  // Format helper for idle time
  const formatIdle = minutes => {
    if (!minutes) return '';
    if (minutes < 60) return `${minutes}m`;
    return `${Math.floor(minutes / 60)}h`;
  };

  // Get status color
  const getStatusColor = status => {
    switch (status) {
      case 'online':
        return 'bg-green-500';
      case 'idle':
        return 'bg-yellow-500';
      case 'dnd':
        return 'bg-red-500';
      case 'offline':
        return 'bg-zinc-500';
      default:
        return 'bg-zinc-500';
    }
  };

  // Get current workspace data
  const getCurrentWorkspace = () => {
    return workspaces.find(w => w.id === currentWorkspace()) || workspaces[0];
  };

  // Get current members for the workspace/channel
  const getCurrentMembers = () => {
    // In a real app, this would filter based on channel membership
    return members;
  };

  // Get messages for the current channel
  const getMessagesForCurrentChannel = () => {
    return messages[currentWorkspace()]?.[currentChannel()] || [];
  };

  // Handle message input
  const handleInput = e => {
    e.preventDefault();

    if (!inputValue().trim()) return;

    // In a real app, this would send the message to a server
    console.log(`Sending message to ${currentChannel()}: ${inputValue()}`);

    // Clear input after sending
    setInputValue('');
  };

  return (
    <div class='flex h-screen flex-col overflow-hidden bg-zinc-950 font-sans text-zinc-300'>
      {/* Top bar with workspace status and main controls */}
      <header class='flex h-12 items-center justify-between border-b border-zinc-800 bg-zinc-900 px-3'>
        <div class='flex items-center gap-2'>
          {/* Mobile menu toggle */}
          <Show when={isMobile()}>
            <Button.Root
              class='rounded p-1.5 text-zinc-400 hover:bg-zinc-800'
              onClick={toggleMobileMenu}
            >
              {isMobileMenuOpen() ?
                <IconClose class='h-4 w-4' />
              : <IconServer class='h-4 w-4' />}
            </Button.Root>
          </Show>

          {/* Desktop menu toggle */}
          <Show when={!isMobile()}>
            <Button.Root
              class='rounded p-1.5 text-zinc-400 hover:bg-zinc-800'
              onClick={() => setShowWorkspaceList(!showWorkspaceList())}
            >
              <IconServer class='h-4 w-4' />
            </Button.Root>
          </Show>

          <div class='flex items-center gap-2 truncate text-sm'>
            <span class='font-medium text-white'>
              {getCurrentWorkspace().name}
            </span>
            <span class='hidden text-xs text-zinc-500 md:inline'>
              {getCurrentWorkspace().domain}
            </span>
          </div>

          <div class='flex h-3 w-3 items-center justify-center rounded-full bg-zinc-800'>
            <div
              class={`h-2 w-2 rounded-full ${getCurrentWorkspace().status === 'connected' ? 'bg-green-500' : 'bg-red-500'}`}
            ></div>
          </div>
        </div>

        <div class='flex items-center gap-2'>
          {/* Member list toggle - unified for mobile and desktop */}
          <Button.Root
            class='rounded p-1.5 text-zinc-400 hover:bg-zinc-800'
            onClick={() => setShowMemberList(!showMemberList())}
          >
            <IconMembers class='h-4 w-4' />
          </Button.Root>

          <Button.Root
            class='rounded p-1.5 text-zinc-400 hover:bg-zinc-800'
            onClick={() => setShowCommandPalette(true)}
          >
            <IconCommand class='h-4 w-4' />
          </Button.Root>

          {/* Settings and user button - hide on smallest screens */}
          <Button.Root class='hidden rounded p-1.5 text-zinc-400 hover:bg-zinc-800 sm:inline-flex'>
            <IconSettings class='h-4 w-4' />
          </Button.Root>

          <Button.Root class='rounded bg-zinc-800 px-2 py-1 text-xs hover:bg-zinc-700 sm:text-sm'>
            taylor
          </Button.Root>
        </div>
      </header>

      {/* Main content area */}
      <div class='flex flex-1 overflow-hidden'>
        {/* Workspace list sidebar with slide animation */}
        <Show when={showWorkspaceList()}>
          <div
            class={`absolute inset-0 z-10 flex h-full w-full flex-col bg-zinc-900 transition-transform duration-300 ease-in-out md:relative md:w-60 ${
              workspaceListVisible() ? 'translate-x-0' : (
                '-translate-x-full md:translate-x-0'
              )
            }`}
          >
            {/* Mobile header with close button */}
            <Show when={isMobile()}>
              <div class='flex items-center justify-between border-b border-zinc-800 p-3'>
                <h2 class='font-medium'>Workspaces</h2>
                <Button.Root
                  class='rounded p-1 text-zinc-400 hover:bg-zinc-800'
                  onClick={() => setShowWorkspaceList(false)}
                >
                  <IconClose class='h-4 w-4' />
                </Button.Root>
              </div>
            </Show>

            <div class='flex-1 overflow-y-auto p-2'>
              {/* Workspaces list */}
              <For each={workspaces}>
                {workspace => (
                  <div class='mb-3'>
                    <div
                      class='flex cursor-pointer items-center justify-between rounded px-2 py-1.5 hover:bg-zinc-800/50'
                      onClick={() => toggleWorkspaceExpanded(workspace.id)}
                    >
                      <div class='flex items-center gap-2'>
                        <div class='flex h-5 w-5 items-center justify-center rounded bg-indigo-600 text-white'>
                          {workspace.name.charAt(0).toUpperCase()}
                        </div>
                        <span class='text-sm font-medium'>
                          {workspace.name}
                        </span>
                      </div>
                      <IconChevronDown
                        class={`h-4 w-4 text-zinc-500 transition-transform duration-200 ${
                          expandedWorkspaces()[workspace.id] ?
                            'rotate-0'
                          : '-rotate-90'
                        }`}
                      />
                    </div>

                    <Show when={expandedWorkspaces()[workspace.id]}>
                      <div class='mt-1 ml-1 space-y-0.5'>
                        {/* Channels list */}
                        <div class='mx-2 my-1 text-xs font-medium text-zinc-500'>
                          CHANNELS
                        </div>
                        <For each={workspace.channels.filter(c => c.joined)}>
                          {channel => (
                            <div
                              class={`flex items-center justify-between rounded px-2 py-1.5 text-sm ${
                                (
                                  currentWorkspace() === workspace.id &&
                                  currentChannel() === channel.name
                                ) ?
                                  'bg-zinc-800 text-zinc-100'
                                : 'text-zinc-400 hover:bg-zinc-800/50'
                              }`}
                              onClick={() =>
                                selectChannel(workspace.id, channel.name)
                              }
                            >
                              <div class='flex items-center gap-1.5'>
                                <IconHashtag class='h-3.5 w-3.5' />
                                <span>{channel.name}</span>
                              </div>

                              <Show when={channel.unread}>
                                <div class='flex h-5 w-5 items-center justify-center rounded-full bg-red-500 text-xs text-white'>
                                  {channel.unread}
                                </div>
                              </Show>
                            </div>
                          )}
                        </For>

                        {/* Direct messages */}
                        <Show when={workspace.directMessages?.length > 0}>
                          <div class='mt-3 space-y-0.5 border-t border-zinc-800 pt-3'>
                            <div class='mx-2 mb-1 text-xs font-medium text-zinc-500'>
                              DIRECT MESSAGES
                            </div>
                            <For each={workspace.directMessages}>
                              {dm => (
                                <div
                                  class={`flex items-center justify-between rounded px-2 py-1.5 text-sm ${
                                    (
                                      currentWorkspace() === workspace.id &&
                                      currentChannel() === dm.user
                                    ) ?
                                      'bg-zinc-800 text-zinc-100'
                                    : 'text-zinc-400 hover:bg-zinc-800/50'
                                  }`}
                                  onClick={() =>
                                    selectChannel(workspace.id, dm.user)
                                  }
                                >
                                  <div class='flex items-center gap-1.5'>
                                    <div class='h-3.5 w-3.5 rounded-full bg-zinc-700'></div>
                                    <span>{dm.user}</span>
                                  </div>

                                  <Show when={dm.unread}>
                                    <div class='flex h-5 w-5 items-center justify-center rounded-full bg-red-500 text-xs text-white'>
                                      {dm.unread}
                                    </div>
                                  </Show>
                                </div>
                              )}
                            </For>
                          </div>
                        </Show>

                        {/* Available Channels */}
                        <Show when={workspace.channels.some(c => !c.joined)}>
                          <div class='mt-3 ml-1 border-t border-zinc-800/50 pt-2'>
                            <div class='mx-2 mb-1 text-xs font-medium text-zinc-500'>
                              BROWSE CHANNELS
                            </div>
                            <div class='space-y-0.5'>
                              <For
                                each={workspace.channels.filter(c => !c.joined)}
                              >
                                {channel => (
                                  <div
                                    class='flex items-center justify-between rounded px-2 py-1.5 text-sm text-zinc-600 hover:bg-zinc-800/50'
                                    onClick={() => {
                                      console.log(`Joining ${channel.name}...`);
                                    }}
                                  >
                                    <div class='flex items-center gap-1.5'>
                                      <IconPlus class='h-3.5 w-3.5' />
                                      <span>{channel.name}</span>
                                    </div>

                                    <div class='text-xs text-zinc-700'>
                                      {channel.memberCount}
                                    </div>
                                  </div>
                                )}
                              </For>
                            </div>
                          </div>
                        </Show>
                      </div>
                    </Show>
                  </div>
                )}
              </For>
            </div>

            {/* Create channel button */}
            <div class='border-t border-zinc-800 p-3'>
              <Button.Root class='flex w-full items-center gap-2 rounded p-2 text-sm text-zinc-400 hover:bg-zinc-800'>
                <IconPlus class='h-4 w-4' />
                <span>Create Channel</span>
              </Button.Root>
            </div>
          </div>
        </Show>

        {/* Main chat area */}
        <div
          class={`flex flex-1 flex-col ${showMemberList() && !isMobile() ? 'md:mr-60' : ''}`}
        >
          {/* Channel info */}
          <div class='flex h-12 items-center justify-between border-b border-zinc-800 bg-zinc-900 px-3'>
            <div class='flex items-center space-x-2'>
              <div class='text-zinc-600'>
                {currentChannel().charAt(0) === '#' ?
                  <IconHashtag class='h-4 w-4' />
                : <div class='h-4 w-4 rounded-full bg-green-500'></div>}
              </div>
              <span class='text-sm font-medium text-white'>
                {currentChannel()}
              </span>
            </div>

            <div class='flex items-center gap-2'>
              <Button.Root class='rounded p-1.5 text-zinc-400 hover:bg-zinc-800'>
                <IconSearch class='h-4 w-4' />
              </Button.Root>
              <Button.Root class='rounded p-1.5 text-zinc-400 hover:bg-zinc-800'>
                <IconPin class='h-4 w-4' />
              </Button.Root>
              <Button.Root class='rounded p-1.5 text-zinc-400 hover:bg-zinc-800'>
                <IconMore class='h-4 w-4' />
              </Button.Root>
            </div>
          </div>

          {/* Messages container */}
          <div class='flex-1 overflow-y-auto p-4'>
            <For each={getMessagesForCurrentChannel()}>
              {message => (
                <div class='mb-3'>
                  <Switch>
                    {/* Regular message */}
                    <Match when={message.type === 'message'}>
                      <div class='flex gap-3'>
                        <div class='mt-0.5 flex-shrink-0'>
                          <div class='flex h-8 w-8 items-center justify-center rounded-full bg-indigo-600 text-white'>
                            {message.user.name.charAt(0).toUpperCase()}
                          </div>
                        </div>
                        <div class='flex-1'>
                          <div class='flex flex-wrap items-center gap-2'>
                            <span
                              class={`font-medium ${
                                message.user.role === 'admin' ? 'text-red-400'
                                : message.user.role === 'moderator' ?
                                  'text-green-400'
                                : message.user.role === 'verified' ?
                                  'text-blue-400'
                                : 'text-indigo-400'
                              }`}
                            >
                              {message.user.name}
                              {message.user.role === 'verified' && (
                                <IconCheckBadge class='ml-1 inline-block h-4 w-4 text-blue-400' />
                              )}
                            </span>
                            <span class='text-xs text-zinc-500'>
                              {message.time}
                            </span>
                          </div>
                          <div class='mt-1 break-words text-zinc-300'>
                            {message.content}
                          </div>
                        </div>
                      </div>
                    </Match>

                    {/* System notification */}
                    <Match when={message.type === 'system'}>
                      <div class='flex justify-center py-1'>
                        <div class='rounded-full bg-zinc-900/50 px-3 py-1 text-sm text-zinc-500'>
                          {message.content}
                        </div>
                      </div>
                    </Match>

                    {/* Action (/me) */}
                    <Match when={message.type === 'action'}>
                      <div class='flex items-center gap-2 py-1 text-indigo-400 italic'>
                        <span class='font-medium'>{message.user.name}</span>
                        <span>{message.content}</span>
                        <span class='text-xs text-zinc-500'>
                          {message.time}
                        </span>
                      </div>
                    </Match>
                  </Switch>
                </div>
              )}
            </For>
          </div>

          {/* Input area */}
          <div class='border-t border-zinc-800 bg-zinc-900 px-3 py-2'>
            <form
              onSubmit={handleInput}
              class='flex items-center rounded-md bg-zinc-800 px-3 focus-within:ring-1 focus-within:ring-indigo-500'
            >
              <div class='mr-2 text-sm text-zinc-600'>
                {currentChannel().charAt(0) === '#' ?
                  <IconHashtag class='h-4 w-4' />
                : <div class='h-4 w-4 rounded-full bg-green-500'></div>}
              </div>

              <TextField.Root class='flex-1'>
                <TextField.Input
                  value={inputValue()}
                  onInput={e => setInputValue(e.target.value)}
                  placeholder={`Message ${currentChannel()}`}
                  class='w-full border-0 bg-transparent px-1 py-2.5 text-sm placeholder:text-zinc-600 focus:outline-none'
                  onKeyDown={e => {
                    if (e.key === 'Tab' && inputValue().startsWith('/')) {
                      e.preventDefault();
                      // Command auto-completion would go here
                    }
                  }}
                />
              </TextField.Root>

              <div class='ml-2 flex items-center gap-2'>
                <Button.Root class='rounded p-1.5 text-zinc-500 hover:bg-zinc-700'>
                  <IconAttachment class='h-4 w-4' />
                </Button.Root>
                <Button.Root
                  type='submit'
                  class='rounded p-1.5 text-indigo-400 hover:bg-zinc-700'
                >
                  <IconSend class='h-4 w-4' />
                </Button.Root>
              </div>
            </form>
          </div>
        </div>

        {/* Member list sidebar with slide animation */}
        <Show when={showMemberList()}>
          <div
            class={`absolute inset-0 z-10 w-full flex-col border-l border-zinc-800 bg-zinc-900 transition-transform duration-300 ease-in-out md:relative md:flex md:w-60 ${
              memberListVisible() ? 'translate-x-0' : (
                'translate-x-full md:translate-x-0'
              )
            }`}
          >
            {/* Mobile header with close button */}
            <Show when={isMobile()}>
              <div class='flex items-center justify-between border-b border-zinc-800 p-3'>
                <h2 class='font-medium'>Members</h2>
                <Button.Root
                  class='rounded p-1 text-zinc-400 hover:bg-zinc-800'
                  onClick={() => setShowMemberList(false)}
                >
                  <IconClose class='h-4 w-4' />
                </Button.Root>
              </div>
            </Show>

            <div class='p-3'>
              <TextField.Root>
                <TextField.Input
                  placeholder='Find member'
                  class='w-full rounded bg-zinc-800 px-3 py-1.5 text-sm placeholder:text-zinc-600'
                />
              </TextField.Root>
            </div>
            <div class='flex-1 overflow-y-auto p-3'>
              <div class='space-y-5'>
                {/* Online members */}
                <div>
                  <h3 class='mb-2 text-xs font-medium text-zinc-500'>
                    ONLINE â€” {members.filter(m => m.status === 'online').length}
                  </h3>
                  <div class='space-y-1'>
                    <For each={members.filter(m => m.status === 'online')}>
                      {member => (
                        <div class='flex items-center gap-2 rounded px-2 py-1 hover:bg-zinc-800'>
                          <div class='relative'>
                            <div class='flex h-7 w-7 items-center justify-center rounded-full bg-indigo-600 text-white'>
                              {member.name.charAt(0).toUpperCase()}
                            </div>
                            <div class='absolute right-0 bottom-0 h-2.5 w-2.5 rounded-full border-2 border-zinc-900 bg-green-500'></div>
                          </div>
                          <div class='flex-1 truncate'>
                            <div
                              class={`text-sm ${
                                member.role === 'admin' ? 'text-red-400'
                                : member.role === 'moderator' ? 'text-green-400'
                                : member.role === 'verified' ? 'text-blue-400'
                                : 'text-zinc-300'
                              }`}
                            >
                              {member.name}
                              {member.role === 'verified' && (
                                <IconCheckBadge class='ml-1 inline-block h-3 w-3 text-blue-400' />
                              )}
                            </div>
                          </div>
                        </div>
                      )}
                    </For>
                  </div>
                </div>

                {/* Offline members */}
                <div>
                  <h3 class='mb-2 text-xs font-medium text-zinc-500'>
                    OFFLINE â€”{' '}
                    {members.filter(m => m.status === 'offline').length}
                  </h3>
                  <div class='space-y-1'>
                    <For each={members.filter(m => m.status === 'offline')}>
                      {member => (
                        <div class='flex items-center gap-2 rounded px-2 py-1 text-zinc-500 hover:bg-zinc-800'>
                          <div class='relative'>
                            <div class='flex h-7 w-7 items-center justify-center rounded-full bg-zinc-700 text-zinc-400'>
                              {member.name.charAt(0).toUpperCase()}
                            </div>
                            <div class='absolute right-0 bottom-0 h-2.5 w-2.5 rounded-full border-2 border-zinc-900 bg-zinc-600'></div>
                          </div>
                          <div class='flex-1 truncate'>
                            <div class='text-sm'>{member.name}</div>
                          </div>
                        </div>
                      )}
                    </For>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </Show>
      </div>

      {/* Command palette dialog with animation */}
      <Show when={showCommandPalette()}>
        <Dialog.Root
          open={showCommandPalette()}
          onOpenChange={setShowCommandPalette}
        >
          <Dialog.Portal>
            <Dialog.Overlay
              class='fixed inset-0 bg-black/75 transition-opacity duration-200 ease-in-out'
              style={{
                animation: 'overlayShow 150ms cubic-bezier(0.16, 1, 0.3, 1)',
              }}
            />
            <Dialog.Content
              class='fixed top-[10%] left-1/2 w-[95%] max-w-[95vw] -translate-x-1/2 rounded-lg border border-zinc-800 bg-zinc-900 p-4 text-zinc-300 shadow-xl transition-all duration-200 ease-in-out sm:top-[20%] sm:w-[480px]'
              style={{
                animation: 'contentShow 200ms cubic-bezier(0.16, 1, 0.3, 1)',
              }}
            >
              <Dialog.Title class='mb-4 text-lg font-bold'>
                Quick Commands
              </Dialog.Title>
              <div class='max-h-[60vh] overflow-y-auto sm:max-h-[340px]'>
                <table class='w-full border-collapse text-sm'>
                  <thead>
                    <tr class='border-b border-zinc-800 text-zinc-500'>
                      <th class='w-20 px-3 py-2 text-left'>Command</th>
                      <th class='px-3 py-2 text-left'>Description</th>
                      <th class='w-40 px-3 py-2 text-left'>Usage</th>
                    </tr>
                  </thead>
                  <tbody>
                    <For each={commands}>
                      {cmd => (
                        <tr class='border-b border-zinc-800/50 hover:bg-zinc-800/30'>
                          <td class='px-3 py-2 font-medium text-indigo-400'>
                            /{cmd.name}
                          </td>
                          <td class='px-3 py-2'>{cmd.description}</td>
                          <td class='px-3 py-2 text-zinc-500'>{cmd.usage}</td>
                        </tr>
                      )}
                    </For>
                  </tbody>
                </table>
              </div>
              <div class='mt-4 flex justify-end'>
                <Button.Root
                  class='rounded-md bg-indigo-600 px-4 py-2 text-sm hover:bg-indigo-700'
                  onClick={() => setShowCommandPalette(false)}
                >
                  Close
                </Button.Root>
              </div>
            </Dialog.Content>
          </Dialog.Portal>
        </Dialog.Root>
      </Show>

      <style>{`
        /* Modern scrollbar styling */
        ::-webkit-scrollbar {
          width: 6px;
          height: 6px;
        }
        ::-webkit-scrollbar-track {
          background: transparent;
        }
        ::-webkit-scrollbar-thumb {
          background: rgba(82, 82, 91, 0.5);
          border-radius: 3px;
        }
        ::-webkit-scrollbar-thumb:hover {
          background: rgba(82, 82, 91, 0.8);
        }
        
        /* Animation keyframes */
        @keyframes overlayShow {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        @keyframes contentShow {
          from { 
            opacity: 0; 
            transform: translate(-50%, -8px) scale(0.96);
          }
          to { 
            opacity: 1; 
            transform: translate(-50%, 0) scale(1); 
          }
        }
      `}</style>
    </div>
  );
}
